function onEditInstallable(e) {
    // Validate the event object
    if (!e) {
        logToSheet("No event object received");
        return;
    }

    // Get the edited range and value
    const editedRange = e.range;
    const editedValue = e.value;

    // Validate the range and value
    if (!editedRange || typeof editedValue === 'undefined') {
        logToSheet("Invalid range or value in event");
        return;
    }

    const spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
    const outputSheet = spreadsheet.getSheetByName("Output");
    const logsSheet = spreadsheet.getSheetByName("Logs");

    // Edit to Start Main Function
    if (editedRange.getSheet().getName() === "Output" && editedRange.getA1Notation() === "C1" && editedValue === "Run") {
        logToSheet("Dropdown changed to 'Run'. Starting data organization.");
        // Call the function to organize data when the dropdown is set to "Run"
        organizeData();
    }

    // Edit to clear Output, Logs, and Row Data
    if (editedRange.getSheet().getName() === "Output" && editedRange.getA1Notation() === "D1") {
        if (editedValue === "TRUE") {
            // Clear everything in Output sheet after row 2
            outputSheet.getRange("A3:Z" + outputSheet.getMaxRows()).clearContent();
            // Clear everything in Logs sheet
            logsSheet.clear();
            logToSheet("Cleared output and log sheet.");
            deleteLastRowProperties();
        }
    }
}



function organizeData() {
    // Define variables
    logToSheet("main function started!");
    manageTriggers ();
    var spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
    var outputSheet = spreadsheet.getSheetByName("Output");
    var roosterTeethSheet = spreadsheet.getSheetByName("RoosterTeeth");
    var youtubeSheet = spreadsheet.getSheetByName("Youtube");
    var properties = PropertiesService.getUserProperties();
    
    // logToSheet("Got references to sheets.");
    
    // Retrieve last processed row indices from properties
    let lastYouTubeRow = parseInt(properties.getProperty('lastYouTubeRow'), 10) || 0;
    //let lastRoosterTeethRow = parseInt(properties.getProperty('lastRoosterTeethRow'), 10) || 1;  -----no longer in use 

    // Determine the starting row for the output sheet
    let lastOutputRow = outputSheet.getLastRow();
    let outputStartRow = lastOutputRow + 1;
    //     logToSheet("Determined last row in output sheet.");

    // Batch sizes -----------------------------------------------------------------------------------------------------------------
    var youtubeBatchSize = 50; // Process X YouTube rows at a time
    var roosterTeethBatchSize = 1000; // Process X RoosterTeeth rows at a time
    logToSheet(`Set YouTube batch size to ${youtubeBatchSize} and RoosterTeeth batch size to ${roosterTeethBatchSize}.`);

    // Get YouTube data and skip header row
    var youtubeDataRange = youtubeSheet.getDataRange();
    var youtubeData = youtubeDataRange.getValues();
    youtubeData.shift();

    // Define column index for show name in RoosterTeeth sheet (column E)
    var showNameColumnIndex = 4;
    //   logToSheet("Defined column index for show name.");

    // Define the desired show name for comparison ----------------------------------------------------------------------------------------
    var desiredShowName = "On The Spot";
    logToSheet(`Set desired show name: ${desiredShowName}`);

    // Process YouTube data in batches of 5 rows
    while (lastYouTubeRow < youtubeData.length) {
        // Get the end index for the current batch of YouTube rows
        var youtubeEndIndex = Math.min(lastYouTubeRow + youtubeBatchSize, youtubeData.length);

        // Log the start of a new batch of YouTube rows
        logToSheet(`Processing new batch of YouTube rows from index ${lastYouTubeRow} to ${youtubeEndIndex}.`);

        // Array to hold matches for the current batch of YouTube rows
        var outputData = [];

        // Process each YouTube row in the current batch
        for (let i = lastYouTubeRow; i < youtubeEndIndex; i++) {
            var yearStartRows = createindex ();
            var youtubeRow = youtubeData[i];
            var youtubeDate = new Date(youtubeRow[3]);
            var youtubeURL = youtubeRow[1];
            var currentYTRowYear = youtubeDate.getFullYear();
            var startingRTRow = yearStartRows[currentYTRowYear];

            // Get the next year from the index
            var nextYear = currentYTRowYear + 1;
            // Determine the ending row for the next year
            var endingRTRow = yearStartRows[nextYear];

            // logToSheet(`Year to find is ${youtubeDate}, which is on row ${startingRTRow}, Ending RoosterTeeth row for next year (${nextYear}) is ${endingRTRow}`);
            logToSheet(`current youtube row is ${i}, containing the information ${youtubeRow}`)



            // Initialize match found flag
            let matchFound = false;

            // Log details of the current YouTube row being processed
            //  logToSheet(`Processing YouTube row at index ${i}: URL = ${youtubeURL}, Date = ${youtubeDate.toISOString()}.`);

          // logToSheet("begining RT loop");
    var currentRTRow = startingRTRow; // Initialize currentRTRow with startingRTRow
          
          
          
          // Process RT data Batch Loop
    while (currentRTRow <= endingRTRow) {
          // logToSheet("RT loop has begun or restarted");

          // Define the range of RoosterTeeth batch starting from the matched row
          var roosterTeethEndIndex = Math.min(currentRTRow + roosterTeethBatchSize - 1, roosterTeethSheet.getLastRow());
          //logToSheet(`roosterteeth end index is ${roosterTeethEndIndex}, `);
          var roosterTeethDataRange = roosterTeethSheet.getRange(currentRTRow, 1, roosterTeethEndIndex - currentRTRow + 1, 6);
          var roosterTeethData = roosterTeethDataRange.getValues();
          var roosterTeethBackgroundColors = roosterTeethSheet.getRange(startingRTRow, 4, endingRTRow - startingRTRow + 1).getBackgrounds();
          // logToSheet("rt color array complete")

          // Log details of the current batch of RoosterTeeth rows being processed
          // logToSheet(`Processing RoosterTeeth rows from index ${currentRTRow} to ${roosterTeethEndIndex}. ending at ${endingRTRow}`);

          // Process each RoosterTeeth row in the current batch
          for (let j = 0; j < roosterTeethData.length; j++) {
              var roosterTeethRow = roosterTeethData[j];
              var roosterTeethDate = new Date(roosterTeethRow[3]);
              var roosterTeethShowName = roosterTeethRow[showNameColumnIndex];
              var roosterTeethURL = roosterTeethRow[1];
              var roosterTeethDateBackgroundColor = roosterTeethBackgroundColors[j][0];

              // Log details of the current RoosterTeeth row being processed
              // logToSheet(`Processing RoosterTeeth row at index ${currentRTRow + j}: youtube date to find = ${youtubeDate}. from youtube row ${currentRTRow}, +`);

              // Skip RoosterTeeth rows where the date cell has a green background
              if (roosterTeethDateBackgroundColor === "#008000") {
                //logToSheet(`Date checking is ${roosterTeethDate}`);
                //logToSheet(`date is already green meaning a match is found skipping RT row ${currentRTRow}`);
                  continue; // Skip this RoosterTeeth row because the date cell is green
              }

              // Compare YouTube and RoosterTeeth data  ------------------------------------------------------------------------------------------------------------------------------------------------
              if (roosterTeethShowName === desiredShowName && Math.abs(youtubeDate - roosterTeethDate) <= 1 * 24 * 60 * 60 * 1000) {
                
                  // Set background color of RoosterTeeth and Youtube Date cell to green
                  //logToSheet(`current youtube row is ${i}`)
                  // youtubeSheet.getRange(i + 2, 4).setBackground("green");
                   roosterTeethSheet.getRange(currentRTRow + j, 4).setBackground("green");
                   logMatchToSheet(`Match found!: YouTube URL = ${youtubeURL}, RoosterTeeth URL = ${roosterTeethURL}`);

                  // Add YouTube URL and matching RoosterTeeth URL to output data
                  outputData.push([youtubeURL, roosterTeethURL]);

                  // Update the background color in the array
                  roosterTeethSheet.getRange(currentRTRow + j, 4).setBackground("green");
                  roosterTeethDataRange.getCell(j + 1, 4).setBackground("green");

                  // Break the loop as a match has been found
                  matchFound = true;
                  deleteRTProperties();
                  //logToSheet ('Reseting RT Rows')
                  break;
            }
          }

          // If match found, stop searching further for the current YouTube row
          if (matchFound) {
          //  logToSheet(`Match found for YouTube row at index ${i}. Stopping search in Current RoosterTeeth batch.`);
              break;
          }

          // Move to the next batch of RoosterTeeth rows if a match is not found from current batch
          // logToSheet ("moving to next batch of rt rows");
          currentRTRow += roosterTeethBatchSize;
         // logToSheet(`no match found for current RT batch ending at row  ${roosterTeethRow} `)

          // Drop the data from the current batch 
          roosterTeethData = [];
          // logToSheet(`Updated currentRTRow to ${currentRTRow}.`);
      }

        // Handle no match case
      if (!matchFound) {
          logToSheet(`No Match Found at current youtube row ${i}`);
          outputData.push([`${youtubeURL}`, `No match found`]);
          //deleteRTProperties();
          //logToSheet('Resetting RT Rows');
          // Reset lastRoosterTeethRow to 0 to start from the beginning of the RoosterTeeth data
          startingRTRow = 3;
      }

      
       }

          // Batch update the output sheet with matches from the current YouTube batch
          //logMatchToSheet(`Youtube batch complete updating output sheet starting at row ${outputStartRow}.`);
          outputSheet.getRange(outputStartRow, 1, outputData.length, 2).setValues(outputData);
          outputStartRow += outputData.length; // Update the starting row for the next batch of matches

          logToSheet("Batch update completed.");  // Updated outputStartRow to ${outputStartRow}.`   --  add this back into the left log for debuggins when needed

          // Update YouTube row index for the next batch of rows
          lastYouTubeRow = youtubeEndIndex;
          // logToSheet(`Updated lastYouTubeRow to ${lastYouTubeRow} for the next batch of YouTube rows.`);

          // Reset outputData array for the next YouTube batch
          outputData = [];

          // Update last processed row indices in properties
          // logToSheet(`Updating properties: lastYouTubeRow = ${lastYouTubeRow}, lastRoosterTeethRow = ${lastRoosterTeethRow}.`);
          properties.setProperty('lastYouTubeRow', lastYouTubeRow.toString());
          //properties.setProperty('lastRoosterTeethRow', lastRoosterTeethRow.toString());  - this is currently unused anymore

          logToSheet(`Properties updated. Ending current iteration of loop.`);
        
          //logToSheet ("creating trigger to pause function")
          setrebootTrigger ();
          logToSheet("freeze process trigger set, freezing process to avoid timeout")
          return;
          

     }


   // Processing complete , reset dropdown to stop
     logToSheet("Done???.");
     outputSheet.getRange("C1").setValue("Stop");
     deleteLastRowProperties();
     manageTriggers();

}

// Function that creates my custom index tracking the RT Years and what row they start on
function createindex(){
  //create an object where the keys are the years and row number associated
  const yearStartRows = {
    2009: 343,
    2010: 734,
    2011: 1360,
    2012: 2900,
    2013: 5117,
    2014: 7096,
    2015: 9029,
    2016: 11462,
    2017: 14951,
    2018: 18808,
    2019: 22851,
    2020: 27413,
    2021: 32465,
    2022: 36752,
    2023: 39807,
    2024: 42015,
  };
  return yearStartRows;
}

// Function to delete all saved data of RT and YT current rows in the main function
function deleteLastRowProperties() {
    const properties = PropertiesService.getUserProperties();

    // Delete the properties for last YouTube row and last RoosterTeeth row
    properties.deleteProperty('lastYouTubeRow');
    properties.deleteProperty('lastRoosterTeethRow');
    logToSheet("Deleted lastYouTubeRow and lastRoosterTeethRow properties.");
}

// Function to delete all saved data of RT Rows current rows only --- this is now unused but im keeping it here just incase
function deleteRTProperties() {
    const properties = PropertiesService.getUserProperties();
    properties.deleteProperty('lastRoosterTeethRow');
}


// Function to set a timmed trigger to start the main function again. 
function setrebootTrigger() {
    //Manage triggers to ensure only one active trigger  -- currently no longer needed
    //manageTriggers(); disable to se if this speeds things up 

    //Set a time-based trigger to continue processing after 1/2 seconds
    ScriptApp.newTrigger('organizeData')
        .timeBased()
        .after(500)
        .create();

    //logToSheet("Freeze process trigger created.");
}


// Function to delete existing triggers if any exist for the main function, this way it doesnt delete the one i made for the onEditinstallable function at the start
function manageTriggers() {
    var triggers = ScriptApp.getProjectTriggers();
     triggers.forEach((trigger) => {
        if (trigger.getHandlerFunction() === 'organizeData') {
            ScriptApp.deleteTrigger(trigger);
            // logToSheet("Deleted existing trigger.");
        }
    });
}


// Function to log messages with a green background, used to highligt matches or specific log you want to see when debugging
function logMatchToSheet(message) {
    const logsSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Logs');
    const nextAvailableRow = logsSheet.getLastRow() + 1;
    const timestamp = Utilities.formatDate(new Date(), Session.getScriptTimeZone(), 'dd/MM/yyyy hh:mm:ss a');
    const logEntry = `${timestamp}: ${message}`;
    const logRange = logsSheet.getRange(nextAvailableRow, 1);
    
    // Set the log entry and the background color
    logRange.setValue(logEntry);
    logRange.setBackground('#CCFFCC'); // Set background color to light green
}

//   Function to Log Messages
function logToSheet(message) {
    const logsSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Logs');
    const nextAvailableRow = logsSheet.getLastRow() + 1;
    const timestamp = Utilities.formatDate(new Date(), Session.getScriptTimeZone(), 'dd/MM/yyyy hh:mm:ss a');
    const logEntry = `${timestamp}: ${message}`;
    logsSheet.getRange(nextAvailableRow, 1).setValue(logEntry);
}
